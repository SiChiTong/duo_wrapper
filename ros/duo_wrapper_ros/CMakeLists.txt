#Generated by VisualGDB project wizard.
#Note: VisualGDB will automatically update this file when you add new sources to the project.

cmake_minimum_required(VERSION 2.7)
project(duo_wrapper_ros)

find_package(OpenCV 2.4 COMPONENTS core highgui imgproc REQUIRED)

find_package(catkin REQUIRED COMPONENTS
  cv_bridge
  dynamic_reconfigure
  image_transport
  rosconsole
  roscpp
  sensor_msgs
  camera_info_manager
)

catkin_package(
#  INCLUDE_DIRS include
#  LIBRARIES duo_ros
  CATKIN_DEPENDS camera_info_manager cv_bridge dynamic_reconfigure image_transport opencv2 rosconsole roscpp sensor_msgs 
#  DEPENDS system_lib
)

 #for now hardcode in DuoInterface
include_directories(
  ${catkin_INCLUDE_DIRS}
  ${OpenCV_INCLUDE_DIRS}
  /var/src/DuoInterface/include
)

link_directories(${OpenCV_LIBRARY_DIRS})
link_directories(/var/src/DuoInterface/Release) # hardcoded hack
link_directories(/var/src/DuoInterface/lib/linux/arm)  # hardcoded hack
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DWITH_GPU")	#This infamous flag that wasted 24 hours of my life...
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -O3 -march=armv8-a")	#Other general flags

set(LIBRARIES_FROM_REFERENCES "")

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# check c++11 / c++0x
include(CheckCXXCompilerFlag)
CHECK_CXX_COMPILER_FLAG("-std=c++11" COMPILER_SUPPORTS_CXX11)
CHECK_CXX_COMPILER_FLAG("-std=c++0x" COMPILER_SUPPORTS_CXX0X)
if(COMPILER_SUPPORTS_CXX11)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
elseif(COMPILER_SUPPORTS_CXX0X)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
else()
    message(FATAL_ERROR "The compiler ${CMAKE_CXX_COMPILER} has no C++11 support. Please use a different C++ compiler.")
endif()

add_executable(duo_wrapper_ros src/duo_wrapper_ros.cpp)

## Add cmake target dependencies of the library
## as an example, code may need to be generated before libraries
## either from message generation or dynamic reconfigure
# add_dependencies(duo_ros ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})
#add_dependencies(duo_wrapper_ros ${PROJECT_NAME}_gencfg)

## Specify libraries to link a library or executable target against
# target_link_libraries(duo_ros_node
#   ${catkin_LIBRARIES}
# )
target_link_libraries(duo_wrapper_ros 
	DuoInterface DUO 
	${catkin_LIBRARIES} 
	${OpenCV_LIBS} 
	"${LIBRARIES_FROM_REFERENCES}")

